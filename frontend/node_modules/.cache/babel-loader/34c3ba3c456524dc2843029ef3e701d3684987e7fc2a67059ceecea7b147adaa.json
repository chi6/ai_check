{"ast":null,"code":"import axios from 'axios';\n\n// 创建axios实例\nconst api = axios.create({\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:8000/api',\n  timeout: 50000 // 50秒超时\n});\n\n// 请求拦截器\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => Promise.reject(error));\n\n// 响应拦截器\napi.interceptors.response.use(response => response.data, error => {\n  // 处理401错误\n  if (error.response && error.response.status === 401) {\n    localStorage.removeItem('token');\n    window.location.href = '/login';\n  }\n  return Promise.reject(error);\n});\n\n// 用户相关API\nexport const userApi = {\n  // 用户注册\n  register: userData => api.post('/user/register', userData),\n  // 用户登录\n  login: (email, password) => api.post('/user/token', new URLSearchParams({\n    'username': email,\n    'password': password\n  }), {\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded'\n    }\n  }),\n  // 获取当前用户信息\n  getCurrentUser: () => api.get('/user/me'),\n  // 获取用户任务列表\n  getTasks: () => api.get('/user/tasks')\n};\n\n// 文件上传相关API\nexport const uploadApi = {\n  // 上传文件\n  uploadFile: file => {\n    const formData = new FormData();\n    formData.append('file', file);\n    return api.post('/upload', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n  }\n};\n\n// 检测相关API\nexport const detectApi = {\n  // 获取检测状态\n  getDetectionStatus: taskId => api.get(`/detect/${taskId}`),\n  // 开始检测\n  startDetection: taskId => api.post(`/detect/${taskId}/start`),\n  // 取消检测\n  cancelDetection: taskId => api.delete(`/detect/${taskId}/cancel`)\n};\n\n// 报告相关API\nexport const reportApi = {\n  // 获取JSON格式报告\n  getJsonReport: taskId => api.get(`/report/${taskId}?format=json`),\n  // 获取PDF格式报告(返回blob)\n  getPdfReport: taskId => api.get(`/report/${taskId}?format=pdf`, {\n    responseType: 'blob'\n  })\n};\nexport default api;","map":{"version":3,"names":["axios","api","create","baseURL","process","env","REACT_APP_API_URL","timeout","interceptors","request","use","config","token","localStorage","getItem","headers","Authorization","error","Promise","reject","response","data","status","removeItem","window","location","href","userApi","register","userData","post","login","email","password","URLSearchParams","getCurrentUser","get","getTasks","uploadApi","uploadFile","file","formData","FormData","append","detectApi","getDetectionStatus","taskId","startDetection","cancelDetection","delete","reportApi","getJsonReport","getPdfReport","responseType"],"sources":["/Users/chi6/Documents/turnitin_web/frontend/src/api/api.js"],"sourcesContent":["import axios from 'axios';\n\n// 创建axios实例\nconst api = axios.create({\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:8000/api',\n  timeout: 50000, // 50秒超时\n});\n\n// 请求拦截器\napi.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => Promise.reject(error)\n);\n\n// 响应拦截器\napi.interceptors.response.use(\n  (response) => response.data,\n  (error) => {\n    // 处理401错误\n    if (error.response && error.response.status === 401) {\n      localStorage.removeItem('token');\n      window.location.href = '/login';\n    }\n    return Promise.reject(error);\n  }\n);\n\n// 用户相关API\nexport const userApi = {\n  // 用户注册\n  register: (userData) => api.post('/user/register', userData),\n  \n  // 用户登录\n  login: (email, password) => api.post('/user/token', \n    new URLSearchParams({\n      'username': email,\n      'password': password,\n    }),\n    {\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded'\n      }\n    }\n  ),\n  \n  // 获取当前用户信息\n  getCurrentUser: () => api.get('/user/me'),\n  \n  // 获取用户任务列表\n  getTasks: () => api.get('/user/tasks'),\n};\n\n// 文件上传相关API\nexport const uploadApi = {\n  // 上传文件\n  uploadFile: (file) => {\n    const formData = new FormData();\n    formData.append('file', file);\n    \n    return api.post('/upload', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n  },\n};\n\n// 检测相关API\nexport const detectApi = {\n  // 获取检测状态\n  getDetectionStatus: (taskId) => api.get(`/detect/${taskId}`),\n  \n  // 开始检测\n  startDetection: (taskId) => api.post(`/detect/${taskId}/start`),\n  \n  // 取消检测\n  cancelDetection: (taskId) => api.delete(`/detect/${taskId}/cancel`),\n};\n\n// 报告相关API\nexport const reportApi = {\n  // 获取JSON格式报告\n  getJsonReport: (taskId) => api.get(`/report/${taskId}?format=json`),\n  \n  // 获取PDF格式报告(返回blob)\n  getPdfReport: (taskId) => api.get(`/report/${taskId}?format=pdf`, {\n    responseType: 'blob'\n  }),\n};\n\nexport default api; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}